/*
    =========================
    ===== PROJECT EULER =====
    =========================

    Problem 2

    https://projecteuler.net/problem=2


    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.

    Generalized to find the sum below N.
    Runs at about O(2^n) because of simple recursion, but optimized by using two co-dependent sequences to minimize calculations.
*/

public class Euler002 {

    private static final int LIMSUP_N = 4000000; //Normally 4000000.

    //Program starts and stops here.
    public static void main(String[] args)
    {
        //Find the sum using recursion.
        System.out.format("%nThe sum of all even-valued Fibonacci numbers below %d is %d.", LIMSUP_N, getSum(2,1,LIMSUP_N));

        //Goodbye.
        System.out.format("%n%n");
        return;
    }

    //Finds the sum of all even-valued Fibonacci numbers below n. Returns the sum.
    private static int getSum(int e, int g, int n)
    {
        /*
            In this sequence, knowing F_2 = 2, only every third term after that needs to be considered.
            Let F_k be even. Because F_(k-1) is odd, so is F_(k+1) and F_(k+2).
            However, because both F_(k+1) and F_(k+2) is odd, F_(k+3) must be even.

            Define two new sequences E and G, where

                E_n = F_(3n-1)  and
                G_n = F_(3n-2)

            In other words, knowing that E_1 = 2 and G_1 = 1,

                E_n = 3*E_(n-1) + 2*G_(n-1)     and
                G_n = 2*E_(n-1) + G_(n-1)

            The sequence E is exactly the sequence of even-valued Fibonacci numbers.
        */

        //Set the initial sum.
        int s = 0;

        //Add in as many terms as necessary using recursion.
        if((3*e+2*g) <= n)
        {
            s += getSum(3*e+2*g, 2*e+g, n);
        }

        //Recursion complete. Add terms of E to s in reverse order.
        s += e;

        //Will return partial sum, except the original call which returns the final sum.
        return s;
    }
}


